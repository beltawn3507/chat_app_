version: "3.8"

services:
  user_service:
    build:
      context: ./backend/user
      dockerfile: dockerfile
    image: beltawn/user_service:1.0.0
    container_name: user_service
    ports:
      - "5000:5000"
    env_file:
      - "./backend/user/.env"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - app

  chat_service:
    build:
      context: ./backend/chat
      dockerfile: dockerfile
    image: beltawn/chat_service:1.0.0
    container_name: chat_service
    ports:
      - "5002:5002"
    env_file:
      - "./backend/chat/.env"
    depends_on:
      user_service:
        condition: service_started
      mongodb:
        condition: service_healthy
    networks:
      - app

  mail_service:
    build:
      context: ./backend/mail
      dockerfile: dockerfile
    image: beltawn/mail_service:1.0.0
    container_name: mail_service
    ports:
      - "5001:5001"
    env_file:
      - "./backend/mail/.env"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app

  mongodb:
    image: mongo:6
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - "mongo_data:/data/db"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app

networks:
  app:
    driver: bridge

volumes:
  mongo_data: